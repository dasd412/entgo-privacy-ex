package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"privacy-ex/pkg/ent"
	"privacy-ex/pkg/graph/gen"
)

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(
	ctx context.Context,
	username string,
	password string,
) (bool, error) {
	panic(fmt.Errorf("not implemented: SignUp - signUp"))
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(
	ctx context.Context,
	username string,
	password string,
) (string, error) {
	panic(fmt.Errorf("not implemented: SignIn - signIn"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(
	ctx context.Context,
	input ent.CreatePostInput,
) (*ent.Post, error) {
	// 기본적으로 모든 사용자가 생성 가능
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(
	ctx context.Context,
	id int,
	input ent.UpdatePostInput,
) (*ent.Post, error) {
	//작성자만 수정 가능
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (
	bool,
	error,
) {
	//관리자, 작성자만 삭제 가능
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int) (*ent.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*ent.Post, error) {
	//  기본적으로 모든 사용자가 조회 가능
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Mutation returns gen.MutationResolver implementation.
func (r *Resolver) Mutation() gen.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
